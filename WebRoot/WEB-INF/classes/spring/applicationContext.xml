<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd ">
        
    <!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 使用注解 -->
	<context:annotation-config />
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.ecloud" />
	<context:component-scan base-package="com.ecloudhotelpcapk" />
	
	<!-- 数据源配置,使用应用内的DBCP数据库连接池(destroy-method:该实例销毁时调用close方法) -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接数 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 最大链接数 -->
		<property name="maxActive" value="${jdbc.maxActive}"  />
		<!-- 最大空闲数，超过数据库连接将被标记为不可用，然后被释放 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"  />
		<!-- 最大建立连接等待时间 ，单位ms-->
		<property name="maxWait" value="500" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	
	<!-- sessionFactory配置 <property name="packagesToScan" value="com.ecloud.entity" />-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
	      <list>
	        <value>classpath*:/config/hibernate/**/*.xml</value>
	      </list>
	    </property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
			</props>
		</property>
		
	</bean>
	
	<bean id="baseDao" class="com.hansy.frame.dao.impl.BaseDaoImpl">
		<property name="sqlMapClientTemplate">
			<ref bean="sqlMapClientTemplate" />
		</property>
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient">
			<ref bean="sqlMapClient" />
		</property>
	</bean>

	<bean id="baseService" class="com.hansy.frame.service.impl.BaseService">
		<property name="baseDao" ref="baseDao"></property>
	</bean>
	
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" /> </bean>

	<!-- spring声明式事务的配置，以下为spring的AOP事务管理的增强部分 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 需要由交给spring的aop来进行代理的方法的集合，如果应用有自己的方法需有由spring来进行事务控制必须添加方法-->

			<!-- 读取数据方法，一般采用只读事务-->
			<tx:method name="get*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />
			<tx:method name="criteria*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />
			<tx:method name="view*" isolation="DEFAULT"
				propagation="SUPPORTS" read-only="true" />


			<!--其他方法，如save，update，insert等对数据库进行写入操作的方法，当产生CrmBaseException进行回滚 -->
			<tx:method name="init*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="insert*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="update*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="register*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="save*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="add*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="create*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="del*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="ServiceException" />
			<tx:method name="undel*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="remove*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="batchCommit*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="execute*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="upload*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="calc*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="import*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
			<tx:method name="deal*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRED"
				rollback-for="ServiceException" />
				
			<!-- 总是新开一个事务的方法 -->
			<tx:method name="invoke*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRES_NEW"
				rollback-for="ServiceException" />
			<tx:method name="make*" isolation="DEFAULT"
				read-only="false" propagation="REQUIRES_NEW"
				rollback-for="ServiceException" />
		</tx:attributes>
	</tx:advice>

	<!--
		Spring采用AOP进行事务控制,这里指定了凡是实现了以com.hylandtec打头的包及其子包里以Service结尾接口中的所有方法需要由事务进行控制
	-->
	<aop:config>
		<aop:pointcut id="serviceOperation_hy"
			expression="execution(* com.hansy..*Service.*(..))" />
			
		<aop:advisor pointcut-ref="serviceOperation_hy"
			advice-ref="txAdvice" />
	</aop:config>
</beans>